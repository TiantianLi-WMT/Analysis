
create or replace table wmt-everest.mfc_data.top_market_analysis_market_level_summary as 

with store_level_summary as (
select
  SUBDIV_NM
  , market_id
  , list_of_stores
  , num_of_stores
  , num_of_SUP
  , cbsa
  , site_nbr
  , Type
  , Current_Soln
  -- historical performance
  , avg_UPLH
  , GMV_scheduled
  , GMV_unscheduled
  , order_basket_scheduled
  , order_basket_unscheduled
  , order_size_scheduled
  , order_size_unscheduled
  , unscheduled_daily_orders
  -- Current Capacity
  , current_mpc
  -- PU2.0 Remodel
  , Remodel_Date
  , Remodel_MPC Remodel_MPC_raw
  , coalesce(Remodel_MPC, current_mpc) Remodel_MPC
  -- MFC
  , MFC_FY_Approved
  , MFC_MPC_Approved
  , MFC_FY_Approved_and_Roadmap
  , MFC_MPC_Approved_and_Roadmap
  -- upper bound rebaseline fcst
  , FY24_UB
  , FY25_UB
  , FY26_UB
  , FY27_UB
  , FY28_UB
  , FY29_UB
  , FY30_UB
  , FY31_UB
  , FY32_UB
  , FY33_UB
  , FY34_UB
  -- one demand fcst
  , FY24_OD
  , FY25_OD
  , FY26_OD
  -- capacity
  , current_mpc FY24_Cap
  -- -- PU2.0 only MPC
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2025 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY25_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2026 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY26_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2027 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY27_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2028 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY28_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2029 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY29_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2030 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY30_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2031 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY31_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2032 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY32_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2033 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY33_Cap
  , case when Remodel_Date is null or extract(year from Remodel_Date)+1 > 2034 then current_mpc else coalesce(Remodel_MPC, current_mpc) end FY34_Cap
-- test

  -- MFC Approved and Live Capacity
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2025 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY25_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2026 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY26_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2027 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY27_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2028 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY28_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2029 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY29_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2030 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY30_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2031 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY31_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2032 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY32_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2033 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY33_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2034 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY34_Cap_mfc

  -- MFC Approved and Live Capacity
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2025 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY25_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2026 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY26_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2027 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY27_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2028 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY28_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2029 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY29_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2030 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY30_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2031 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY31_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2032 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY32_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2033 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY33_Cap_mfc
  , case when MFC_FY_Approved is null or cast(MFC_FY_Approved as int64) > 2034 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved end FY34_Cap_mfc
  -- MFC Full Roadmap 
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2025 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY25_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2026 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY26_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2027 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY27_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2028 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY28_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2029 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY29_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2030 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY30_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2031 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY31_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2032 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY32_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2033 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY33_Cap_full
  , case when MFC_FY_Approved_and_Roadmap is null or cast(MFC_FY_Approved_and_Roadmap as int64) > 2034 then coalesce(Remodel_MPC, current_mpc) else MFC_MPC_Approved_and_Roadmap end FY34_Cap_full

from  wmt-everest.mfc_data.top_market_analysis_base_query
where 1=1
  -- and SUBDIV_NM is not null -- excluding 7 stores
)

, market_level_summary as (
select 
  market_id
  , list_of_stores
  , num_of_stores
  , num_of_SUP
  , cbsa
  -- historical performance
  , avg(avg_UPLH) avg_UPLH
  , sum(GMV_scheduled) GMV_scheduled
  , sum(GMV_unscheduled) GMV_unscheduled
  , sum(unscheduled_daily_orders) unscheduled_daily_orders
  -- forecast
  , sum(FY24_UB) FY24_UB
  , sum(FY25_UB) FY25_UB
  , sum(FY26_UB) FY26_UB
  , sum(FY27_UB) FY27_UB
  , sum(FY28_UB) FY28_UB
  , sum(FY29_UB) FY29_UB
  , sum(FY30_UB) FY30_UB
  , sum(FY31_UB) FY31_UB
  , sum(FY32_UB) FY32_UB
  , sum(FY33_UB) FY33_UB
  , sum(FY34_UB) FY34_UB
  -- one demand fcst
  , sum(FY24_OD) FY24_OD
  , sum(FY25_OD) FY25_OD
  , sum(FY26_OD) FY26_OD
  -- capacity
  , sum(current_mpc) current_mpc
  , sum(FY25_Cap) FY25_Cap
  , sum(FY26_Cap) FY26_Cap
  , sum(FY27_Cap) FY27_Cap
  , sum(FY28_Cap) FY28_Cap
  , sum(FY29_Cap) FY29_Cap
  , sum(FY30_Cap) FY30_Cap
  , sum(FY31_Cap) FY31_Cap
  , sum(FY32_Cap) FY32_Cap
  , sum(FY33_Cap) FY33_Cap
  , sum(FY34_Cap) FY34_Cap
    -- capacity MFC full
  , sum(FY25_Cap_full) FY25_Cap_full
  , sum(FY26_Cap_full) FY26_Cap_full
  , sum(FY27_Cap_full) FY27_Cap_full
  , sum(FY28_Cap_full) FY28_Cap_full
  , sum(FY29_Cap_full) FY29_Cap_full
  , sum(FY30_Cap_full) FY30_Cap_full
  , sum(FY31_Cap_full) FY31_Cap_full
  , sum(FY32_Cap_full) FY32_Cap_full
  , sum(FY33_Cap_full) FY33_Cap_full
  , sum(FY34_Cap_full) FY34_Cap_full
  -- market utiilzation
  , round(safe_divide(sum(FY24_UB), sum(current_mpc)),2) FY24_Util
  , round(safe_divide(sum(FY25_UB), sum(FY25_Cap)),2) FY25_Util
  , round(safe_divide(sum(FY26_UB), sum(FY26_Cap)),2) FY26_Util
  , round(safe_divide(sum(FY27_UB), sum(FY27_Cap)),2) FY27_Util
  , round(safe_divide(sum(FY28_UB), sum(FY28_Cap)),2) FY28_Util
  , round(safe_divide(sum(FY29_UB), sum(FY29_Cap)),2) FY29_Util
  , round(safe_divide(sum(FY30_UB), sum(FY30_Cap)),2) FY30_Util
  , round(safe_divide(sum(FY31_UB), sum(FY31_Cap)),2) FY31_Util
  , round(safe_divide(sum(FY32_UB), sum(FY32_Cap)),2) FY32_Util
  , round(safe_divide(sum(FY33_UB), sum(FY33_Cap)),2) FY33_Util
  , round(safe_divide(sum(FY34_UB), sum(FY34_Cap)),2) FY34_Util
  -- market utiilzation full
  , round(safe_divide(sum(FY25_UB), sum(FY25_Cap_full)),2) FY25_Util_full
  , round(safe_divide(sum(FY26_UB), sum(FY26_Cap_full)),2) FY26_Util_full
  , round(safe_divide(sum(FY27_UB), sum(FY27_Cap_full)),2) FY27_Util_full
  , round(safe_divide(sum(FY28_UB), sum(FY28_Cap_full)),2) FY28_Util_full
  , round(safe_divide(sum(FY29_UB), sum(FY29_Cap_full)),2) FY29_Util_full
  , round(safe_divide(sum(FY30_UB), sum(FY30_Cap_full)),2) FY30_Util_full
  , round(safe_divide(sum(FY31_UB), sum(FY31_Cap_full)),2) FY31_Util_full
  , round(safe_divide(sum(FY32_UB), sum(FY32_Cap_full)),2) FY32_Util_full
  , round(safe_divide(sum(FY33_UB), sum(FY33_Cap_full)),2) FY33_Util_full
  , round(safe_divide(sum(FY34_UB), sum(FY34_Cap_full)),2) FY34_Util_full
  -- demand percentile
  , percent_rank() over (order by sum(FY24_UB)) FY24_UB_percentile
  , percent_rank() over (order by sum(FY29_UB)) FY29_UB_percentile
from store_level_summary
group by 1,2,3,4,5
)

, market_level_output as (
select
  *
  , case 
      when FY24_UB >= 1100 then '0%-10%'
      when FY24_UB_percentile >= .8 then '10%-20%'
      when FY24_UB_percentile >= .7 then '20%-30%'
      when FY24_UB_percentile >= .6 then '30%-40%'
      when FY24_UB >= 270 then '40%-50%'
      when FY24_UB_percentile >= .4 then '50%-60%'
      when FY24_UB_percentile >= .3 then '60%-70%'
      when FY24_UB_percentile >= .2 then '70%-80%'
      when FY24_UB_percentile >= .1 then '80%-90%'
      when FY24_UB_percentile >= 0 then '90%-100%'
    else null end FY24_UB_percentile_bucket
  , case 
      when FY29_UB >= 2500 then '0%-10%'
      when FY29_UB_percentile >= .8 then '10%-20%'
      when FY29_UB_percentile >= .7 then '20%-30%'
      when FY29_UB_percentile >= .6 then '30%-40%'
      when FY29_UB >= 500 then '40%-50%'
      when FY29_UB_percentile >= .4 then '50%-60%'
      when FY29_UB_percentile >= .3 then '60%-70%'
      when FY29_UB_percentile >= .2 then '70%-80%'
      when FY29_UB_percentile >= .1 then '80%-90%'
      when FY29_UB_percentile >= 0 then '90%-100%'
    else null end FY29_UB_percentile_bucket
  , case when FY26_Util > .7 then '> 70%' else '<= 70%' end FY26_Util_Criteria
from market_level_summary
)

-- select market_id, count(market_id) from market_level_output
-- group by 1 having count(market_id) > 1

-- duplicate markets due to stores assigned to different BU wihin a market, solution: choose the BU with max store sale for that market
, find_BU as (
select 
  market_id
  , SUBDIV_NM
  , rank() over(partition by market_id order by sum(FY24_UB) desc) as ranknum
from store_level_summary
group by 1,2
qualify ranknum = 1
)

select a.*, b.SUBDIV_NM from market_level_output a 
left join find_BU b on a.market_id = b.market_id
